#!/usr/bin/env python3
"""
Collect cas9 read counts
Input:
	cas9_map_file	
		A sam file generated by bowtie2 that maps unmapped reads to cas9 sequence.
	sys.stdin
		A sam file conatining unmapped reads (from cellranger). The cellular and molecular barcode information must be present (CB:Z/CR:Z/UB:Z/UR:Z tag).
	sys.stdout
		The output txt file of read counts
	
"""

import re
import sys

cas9_map_file='unmapped_to_cas9.sam'

# only keep reads mapping to cas9
cas9_map={}
for lines in open(cas9_map_file):
  if lines.startswith('@'):
    continue
  field=lines.strip().split()
  rdn=field[0]
  if rdn not in cas9_map:
    cas9_map[rdn]=0
  cas9_map[rdn]+=1

print(str(len(cas9_map))+' records loaded.',file=sys.stderr)
# process original sam file

cell_readcnt={}
for lines in sys.stdin:
  if lines.startswith('@'):
    continue
  field=lines.strip().split('\t')
  rdn=field[0]
  if rdn not in cas9_map:
    continue
  cell_bc=''
  molecular_bc=''
  has_ub=False
  has_cb=False
  for fl in field[11:]:
    if fl.startswith('CB:Z:'):
      cell_bc=fl[5:]
      has_cb=True
    if has_cb==False and fl.startswith('CR:Z:'):
      cell_bc=fl[5:]
    if fl.startswith('UB:Z:'):
      molecular_bc=fl[5:]
      has_ub=True
    if has_ub==False and fl.startswith('UR:Z:'):
      molecular_bc=fl[5:]
  cell_mol=cell_bc+molecular_bc
  if cell_bc=='' or molecular_bc=='':
    continue
  if cell_bc not in cell_readcnt:
    cell_readcnt[cell_bc]={}
  if molecular_bc not in cell_readcnt[cell_bc]:
    cell_readcnt[cell_bc][molecular_bc]=0
  cell_readcnt[cell_bc][molecular_bc]+=1

  
# reporting
print('cellbc\tReads\tUMI')

for (cell_bc, mol_dict) in cell_readcnt.items():
  nmol=len(mol_dict)
  nt=0
  for (m_bc,v) in mol_dict.items():
    nt+=v
  print(cell_bc+'\t'+str(nmol)+'\t'+str(nt))
   
    
  
  

